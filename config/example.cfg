
// This config file uses "liblcfg" syntax: http://liblcfg.carnivore.it
// Quick syntax summary:
//   - use {} for maps, [] for lists
//   - don't separate items with commas
//   - always put values within double quotes, even if they're integers

// If an option's value is of the form "[[/path/to/file]]", the referenced filename will
// be read in from disk and used as the option's value instead.  Any trailing whitespace
// at the end of the file will be trimmed.  This allows you to store things like database
// passwords elsewhere on disk, keeping it out of this config file.


// Global options that apply to the proxy server as a whole.
options = {
  // Port to listen for client connections on.
  listen_on_port = "2345"

  // Maximum number of connected clients we support before rejecting new
  // connections.  If not configured, no explicit limit is imposed.
  max_clients = "10000"

  // Maximum amount of bytes of client the proxy will queue up for clients
  // that are waiting on query results or a database connection lease.
  // Normally, clients wait for the results of one query before moving onto
  // the next, so this option is mainly here to safeguard against unruly clients.
  // If this limit is exceeded, the client connection will be closed.
  // If this option is not configured, no explicit limit is imposed.
  max_client_input_backlog = "100000"

  // If this is set, wait this many milliseconds between establishing consecutive
  // database connections between the proxy and MySQL.  This is meant to avoid
  // overwhelming MySQL with many simultaneous connections when the proxy starts up.
  delay_milliseconds_between_db_connections = "100"
  
  // String to report as the "server version name" to connecting clients.
  server_version = "5.5-mfproxy"

  // Default "schema" newly connected clients are initialized with, if they
  // don't explicitly request a schema in the handshake.
  default_apparent_database_name = "main"

  // If this is set, the proxy itself will try to respond to schema metadata requests
  // such as SHOW CREATE TABLE.  These queries can be expensive in MySQL, so this can
  // save on overall database workload.
  // TODO: not yet implemented
  cache_schema = "true"

  // If this is set, backend database connections will randomly be marked as in-use
  // (as if a client connection had an outstanding database connection lease).
  // This can be used to simulate busy database connections for loading testing purposes.
  simulate_busy_dbs = "false"

  // If this is set, use libevent's "evdns" for nonblocking database hostname DNS resolutions
  // (otherwise blocking getaddrinfo calls are used).
  use_nonblocking_dns = "true"

  // Number of seconds the proxy caches DNS for backend database connections.
  // If using staggered connection delays via 'delay_milliseconds_between_db_connections',
  // you should make sure this is cache time is large enough that several database connections
  // can be made in succession without having to re-resolve DNS each time.
  dns_cache_time = "10"

  // If this is set, we require clients to authenticate with the proxy during the
  // handshake phase of the protocol.  In this case, the client must select the schema
  // it wants to use during the authentication phase, and the username/password must match
  // the corresponding backend database as seen from the proxy.  We also don't allow the
  // client to switch schemas once connected if this setting is true.
  // If this setting is false, we don't require authentication from clients connecting
  // to the proxy.  If they do send credentials in the handshake we just ignore them.
  require_client_auth = "false"

  // If this is set, more detailed debugging log messages will be printed.
  verbose = "true"

  // If this is set, log messages will be written to this file.  If left unset, messages
  // will be written to stdout instead.
  //   logfile_name = "proxy.log"

  // Log messages using syslog() instead of writing to a log file or stdout.
  use_syslog = "false"

  // Service "identity" name used for syslog messages.  This becomes the first argument
  // to openlog() when syslog is initialized.  Defaults to "mfproxy".
  syslog_ident = "mfproxy"

  // When use_syslog and this option are both set, log messages will be output to syslog
  // in a format used internally by MyFitnessPal.  If you want to customize the log format
  // for your own uses, you can change the implementation of this option to something
  // appropriate.
  use_mfp_syslog_format = "true"

  // Statsd configuration.  If statsd_hostname is specified, the proxy will periodically
  // send runtime statistics to a statsd server.  Currently only UDP is supported for
  // statsd, though you can configure statsd itself to run in TCP mode.
  statsd_hostname = "localhost"
  statsd_port = "8125"

  // All keys sent to statsd are prefixed with this.  Leave it empty for no prefix.
  statsd_key_prefix = "mfproxy"

  // Wait this many seconds between sending stats to statsd.
  statsd_send_interval = "2"
}


// Default settings for the backend database pools.  This must come before the
// database_backends section in the config file.
// You can override these settings per-pool in the database_backends configurations.
defaults = {
  // If this is set, if a client tries to hold open a transaction for more
  // than this number of seconds without any activity, the transaction will
  // be rolled back and the client connection closed.  From the client's point
  // of view this is similar to the MySQL connection thread being killed via the
  // MySQL KILL command.
  max_idle_connection_lease_time = "10"

  // This is similar to max_idle_connection_lease_time, but this limits the
  // maximum total amount of time a client can lease a connection regardless of
  // activity.  Setting this prevents legitimately long transactions from
  // working with the proxy, but it may be necessary in order to handle buggy clients
  // who begin transactions and never commit them (without necessarily leaving
  // the connection idle).
  max_connection_lease_time = "20"

  // Maximum number of seconds the proxy will wait to establish network connections
  // to the backend database.
  database_connect_timeout = "10"

  // If this is set, network connections to backend databases will be made using nonblocking
  // connect() calls.  If this causes problems for you, try setting it to false which will
  // force the initial connection be a synchronous, blocking connect() call instead.
  // Default is true.  Note that blocking connect() gives no way to implement timeouts, so
  // if blocking connects are used, the database_connect_timeout setting will be ignored.
  use_nonblocking_connect = "true"

  // Maximum number of seconds the proxy will wait on the backend database for a response
  // to a query request. If this limit is exceeded then the backend database connection
  // and the client connection that is waiting on the query will both be closed.
  database_query_timeout = "30"

  // Maximum number of seconds a client can wait for a pending lease request to be
  // satisfied (i.e., for a backend database connection to become available) before
  // a timeout error is returned to the client.
  pending_lease_request_timeout = "30"

  // If this is set, the proxy will close backend database connections after they have been
  // open for this number of seconds.  They will then be reopened shortly afterwards.  This
  // is meant as a safeguard to protect against things getting corrupted for extremely long-lived
  // database connections (since any protocol bug, on either MySQL's end or the proxy's end, will
  // mess up the connection in unpredictable ways).
  max_database_connection_lifetime = "1800"

  // Number of backend database connections to establish for each pool.
  connection_pool_size = "3"

  // ??? TODO: need to figure out the right way to deal with this.
  character_set_code = "33"
}

